// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package user

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tabUserFieldNames          = builder.RawFieldNames(&TabUser{})
	tabUserRows                = strings.Join(tabUserFieldNames, ",")
	tabUserRowsExpectAutoSet   = strings.Join(stringx.Remove(tabUserFieldNames, "`user_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tabUserRowsWithPlaceHolder = strings.Join(stringx.Remove(tabUserFieldNames, "`user_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tabUserModel interface {
		Insert(ctx context.Context, data *TabUser) (sql.Result, error)
		FindOne(ctx context.Context, userId uint64) (*TabUser, error)
		Update(ctx context.Context, data *TabUser) error
		Delete(ctx context.Context, userId uint64) error
	}

	defaultTabUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TabUser struct {
		UserId       uint64         `db:"user_id"`       // Standard field for the primary key
		Name         string         `db:"name"`          // A regular string field
		Email        sql.NullString `db:"email"`         // A pointer to a string, allowing for null values
		Age          uint64         `db:"age"`           // An unsigned 8-bit integer
		Birthday     sql.NullTime   `db:"birthday"`      // A pointer to time.Time, can be null
		MemberNumber sql.NullString `db:"member_number"` // Uses sql.NullString to handle nullable strings
		Remark       sql.NullString `db:"remark"`        // 备注
		ActivatedAt  sql.NullTime   `db:"activated_at"`  // Uses sql.NullTime for nullable time fields
		CreatedAt    time.Time      `db:"created_at"`    // Automatically managed by GORM for creation time
		UpdatedAt    time.Time      `db:"updated_at"`    // Automatically managed by GORM for update time
	}
)

func newTabUserModel(conn sqlx.SqlConn) *defaultTabUserModel {
	return &defaultTabUserModel{
		conn:  conn,
		table: "`tab_user`",
	}
}

func (m *defaultTabUserModel) Delete(ctx context.Context, userId uint64) error {
	query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, userId)
	return err
}

func (m *defaultTabUserModel) FindOne(ctx context.Context, userId uint64) (*TabUser, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", tabUserRows, m.table)
	var resp TabUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTabUserModel) Insert(ctx context.Context, data *TabUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, tabUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Email, data.Age, data.Birthday, data.MemberNumber, data.Remark, data.ActivatedAt)
	return ret, err
}

func (m *defaultTabUserModel) Update(ctx context.Context, data *TabUser) error {
	query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, tabUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Email, data.Age, data.Birthday, data.MemberNumber, data.Remark, data.ActivatedAt, data.UserId)
	return err
}

func (m *defaultTabUserModel) tableName() string {
	return m.table
}
