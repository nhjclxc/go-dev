// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: ServiceGroup.proto

package userservice

import (
	"context"

	"go-dev/src/test8_framework/framework_02_micro/micro_05_go_zero/go_zero_05_dsl_proto/group/gen/qq"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LoginReq            = qq.LoginReq
	LoginResp           = qq.LoginResp
	UserClassAddReq     = qq.UserClassAddReq
	UserClassAddResp    = qq.UserClassAddResp
	UserClassDeleteReq  = qq.UserClassDeleteReq
	UserClassDeleteResp = qq.UserClassDeleteResp
	UserClassInfoReq    = qq.UserClassInfoReq
	UserClassInfoResp   = qq.UserClassInfoResp
	UserClassListReq    = qq.UserClassListReq
	UserClassListResp   = qq.UserClassListResp
	UserClassUpdateReq  = qq.UserClassUpdateReq
	UserClassUpdateResp = qq.UserClassUpdateResp
	UserInfoReq         = qq.UserInfoReq
	UserInfoResp        = qq.UserInfoResp
	UserInfoUpdateReq   = qq.UserInfoUpdateReq
	UserInfoUpdateResp  = qq.UserInfoUpdateResp
	UserListReq         = qq.UserListReq
	UserListResp        = qq.UserListResp
	UserRoleAddReq      = qq.UserRoleAddReq
	UserRoleAddResp     = qq.UserRoleAddResp
	UserRoleDeleteReq   = qq.UserRoleDeleteReq
	UserRoleDeleteResp  = qq.UserRoleDeleteResp
	UserRoleInfoReq     = qq.UserRoleInfoReq
	UserRoleInfoResp    = qq.UserRoleInfoResp
	UserRoleListReq     = qq.UserRoleListReq
	UserRoleListResp    = qq.UserRoleListResp
	UserRoleUpdateReq   = qq.UserRoleUpdateReq
	UserRoleUpdateResp  = qq.UserRoleUpdateResp

	UserService interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
		UserInfoUpdate(ctx context.Context, in *UserInfoUpdateReq, opts ...grpc.CallOption) (*UserInfoUpdateResp, error)
		UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error)
		UserRoleList(ctx context.Context, in *UserRoleListReq, opts ...grpc.CallOption) (*UserRoleListResp, error)
		UserRoleUpdate(ctx context.Context, in *UserRoleUpdateReq, opts ...grpc.CallOption) (*UserRoleUpdateResp, error)
		UserRoleInfo(ctx context.Context, in *UserRoleInfoReq, opts ...grpc.CallOption) (*UserRoleInfoResp, error)
		UserRoleAdd(ctx context.Context, in *UserRoleAddReq, opts ...grpc.CallOption) (*UserRoleAddResp, error)
		UserRoleDelete(ctx context.Context, in *UserRoleDeleteReq, opts ...grpc.CallOption) (*UserRoleDeleteResp, error)
		UserClassList(ctx context.Context, in *UserClassListReq, opts ...grpc.CallOption) (*UserClassListResp, error)
		UserClassUpdate(ctx context.Context, in *UserClassUpdateReq, opts ...grpc.CallOption) (*UserClassUpdateResp, error)
		UserClassInfo(ctx context.Context, in *UserClassInfoReq, opts ...grpc.CallOption) (*UserClassInfoResp, error)
		UserClassAdd(ctx context.Context, in *UserClassAddReq, opts ...grpc.CallOption) (*UserClassAddResp, error)
		UserClassDelete(ctx context.Context, in *UserClassDeleteReq, opts ...grpc.CallOption) (*UserClassDeleteResp, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := qq.NewUserServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserService) UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := qq.NewUserServiceClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}

func (m *defaultUserService) UserInfoUpdate(ctx context.Context, in *UserInfoUpdateReq, opts ...grpc.CallOption) (*UserInfoUpdateResp, error) {
	client := qq.NewUserServiceClient(m.cli.Conn())
	return client.UserInfoUpdate(ctx, in, opts...)
}

func (m *defaultUserService) UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	client := qq.NewUserServiceClient(m.cli.Conn())
	return client.UserList(ctx, in, opts...)
}

func (m *defaultUserService) UserRoleList(ctx context.Context, in *UserRoleListReq, opts ...grpc.CallOption) (*UserRoleListResp, error) {
	client := qq.NewUserServiceClient(m.cli.Conn())
	return client.UserRoleList(ctx, in, opts...)
}

func (m *defaultUserService) UserRoleUpdate(ctx context.Context, in *UserRoleUpdateReq, opts ...grpc.CallOption) (*UserRoleUpdateResp, error) {
	client := qq.NewUserServiceClient(m.cli.Conn())
	return client.UserRoleUpdate(ctx, in, opts...)
}

func (m *defaultUserService) UserRoleInfo(ctx context.Context, in *UserRoleInfoReq, opts ...grpc.CallOption) (*UserRoleInfoResp, error) {
	client := qq.NewUserServiceClient(m.cli.Conn())
	return client.UserRoleInfo(ctx, in, opts...)
}

func (m *defaultUserService) UserRoleAdd(ctx context.Context, in *UserRoleAddReq, opts ...grpc.CallOption) (*UserRoleAddResp, error) {
	client := qq.NewUserServiceClient(m.cli.Conn())
	return client.UserRoleAdd(ctx, in, opts...)
}

func (m *defaultUserService) UserRoleDelete(ctx context.Context, in *UserRoleDeleteReq, opts ...grpc.CallOption) (*UserRoleDeleteResp, error) {
	client := qq.NewUserServiceClient(m.cli.Conn())
	return client.UserRoleDelete(ctx, in, opts...)
}

func (m *defaultUserService) UserClassList(ctx context.Context, in *UserClassListReq, opts ...grpc.CallOption) (*UserClassListResp, error) {
	client := qq.NewUserServiceClient(m.cli.Conn())
	return client.UserClassList(ctx, in, opts...)
}

func (m *defaultUserService) UserClassUpdate(ctx context.Context, in *UserClassUpdateReq, opts ...grpc.CallOption) (*UserClassUpdateResp, error) {
	client := qq.NewUserServiceClient(m.cli.Conn())
	return client.UserClassUpdate(ctx, in, opts...)
}

func (m *defaultUserService) UserClassInfo(ctx context.Context, in *UserClassInfoReq, opts ...grpc.CallOption) (*UserClassInfoResp, error) {
	client := qq.NewUserServiceClient(m.cli.Conn())
	return client.UserClassInfo(ctx, in, opts...)
}

func (m *defaultUserService) UserClassAdd(ctx context.Context, in *UserClassAddReq, opts ...grpc.CallOption) (*UserClassAddResp, error) {
	client := qq.NewUserServiceClient(m.cli.Conn())
	return client.UserClassAdd(ctx, in, opts...)
}

func (m *defaultUserService) UserClassDelete(ctx context.Context, in *UserClassDeleteReq, opts ...grpc.CallOption) (*UserClassDeleteResp, error) {
	client := qq.NewUserServiceClient(m.cli.Conn())
	return client.UserClassDelete(ctx, in, opts...)
}
