// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tabUserFieldNames          = builder.RawFieldNames(&TabUser{})
	tabUserRows                = strings.Join(tabUserFieldNames, ",")
	tabUserRowsExpectAutoSet   = strings.Join(stringx.Remove(tabUserFieldNames, "`user_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tabUserRowsWithPlaceHolder = strings.Join(stringx.Remove(tabUserFieldNames, "`user_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tabUserModel interface {
		Insert(ctx context.Context, data *TabUser) (sql.Result, error)
		InsertBatch(ctx context.Context, users []*TabUser) (sql.Result, error)
		FindOne(ctx context.Context, userId uint64) (*TabUser, error)
		Find(ctx context.Context, data *TabUser) ([]*TabUser, error)
		Update(ctx context.Context, data *TabUser) error
		UpdateBySelective(ctx context.Context, data *TabUser) error
		Delete(ctx context.Context, userId uint64) error
		PageList(ctx context.Context, req PageRequest) ([]*TabUser, int64, error)
	}

	defaultTabUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TabUser struct {
		UserId       uint64         `db:"user_id"`       // Standard field for the primary key
		Name         string         `db:"name"`          // A regular string field
		Email        sql.NullString `db:"email"`         // A pointer to a string, allowing for null values
		Age          uint64         `db:"age"`           // An unsigned 8-bit integer
		Birthday     sql.NullTime   `db:"birthday"`      // A pointer to time.Time, can be null
		MemberNumber sql.NullString `db:"member_number"` // Uses sql.NullString to handle nullable strings
		Remark       sql.NullString `db:"remark"`        // 备注
		ActivatedAt  sql.NullTime   `db:"activated_at"`  // Uses sql.NullTime for nullable time fields
		CreatedAt    time.Time      `db:"created_at"`    // Automatically managed by GORM for creation time
		UpdatedAt    time.Time      `db:"updated_at"`    // Automatically managed by GORM for update time
	}

	PageRequest struct {
		TabUser

		Page     int64 // 页码，从 1 开始
		PageSize int64 // 每页数量
	}
)

func newTabUserModel(conn sqlx.SqlConn) *defaultTabUserModel {
	return &defaultTabUserModel{
		conn:  conn,
		table: "`tab_user`",
	}
}

func (m *defaultTabUserModel) Delete(ctx context.Context, userId uint64) error {
	query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, userId)
	return err
}

func (m *defaultTabUserModel) FindOne(ctx context.Context, userId uint64) (*TabUser, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", tabUserRows, m.table)
	var resp TabUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTabUserModel) Find(ctx context.Context, userDTO *TabUser) ([]*TabUser, error) {

	var (
		builder strings.Builder
		args    []interface{}
	)

	builder.WriteString(fmt.Sprintf("select %s from %s where 1=1", tabUserRows, m.table))

	if userDTO.UserId != 0 {
		builder.WriteString(" AND user_id = ?")
		args = append(args, userDTO.UserId)
	}
	if userDTO.Name != "" {
		// Go 的数据库驱动不会将 '%' 包裹的 ? 占位符当作参数来处理，会直接将 %?% 当作字符串，导致参数匹配数量错误，报错：0 arguments provided, not matching sql
		//builder.WriteString(" AND name LIKE '%?%'")
		//args = append(args, userDTO.Name)

		// 你应该把 % 拼接到参数值中，而不是写在 SQL 里。例如 👇：
		builder.WriteString(" AND name LIKE ?")
		args = append(args, "%"+userDTO.Name+"%")
	}
	if userDTO.Age != 0 {
		builder.WriteString(" AND age = ?")
		args = append(args, userDTO.Age)
	}
	if userDTO.Email.String != "" {
		//builder.WriteString(" AND email LIKE '%?%'")
		//args = append(args, userDTO.Email.String)

		builder.WriteString(" AND email LIKE ?")
		args = append(args, "%"+userDTO.Email.String+"%")
	}

	query := builder.String()
	var userList []*TabUser
	err := m.conn.QueryRowsCtx(ctx, &userList, query, args...)
	//fmt.Println(query, args)
	switch err {
	case nil:
		return userList, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTabUserModel) Insert(ctx context.Context, data *TabUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, tabUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Email, data.Age, data.Birthday, data.MemberNumber, data.Remark, data.ActivatedAt)
	return ret, err
}

func (m *defaultTabUserModel) InsertBatch(ctx context.Context, users []*TabUser) (sql.Result, error) {
	if len(users) == 0 {
		return nil, nil
	}

	// 1. 定义列名（不包含 auto-increment 字段）
	query := fmt.Sprintf("INSERT INTO %s (%s) VALUES ", m.table, tabUserRowsExpectAutoSet)

	// 2. 构建占位符和参数数组
	var (
		valueStrings []string
		args         []interface{}
	)

	for _, user := range users {
		valueStrings = append(valueStrings, "(?, ?, ?, ?, ?, ?, ?)")
		args = append(args,
			user.Name,
			user.Email,
			user.Age,
			user.Birthday,
			user.MemberNumber,
			user.Remark,
			user.ActivatedAt,
		)
	}

	// 3. 拼接SQL
	query += strings.Join(valueStrings, ", ")

	// 4. 执行
	ret, err := m.conn.ExecCtx(ctx, query, args...)
	return ret, err
}

func (m *defaultTabUserModel) Update(ctx context.Context, data *TabUser) error {
	query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, tabUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Email, data.Age, data.Birthday, data.MemberNumber, data.Remark, data.ActivatedAt, data.UserId)
	return err
}

func (m *defaultTabUserModel) UpdateBySelective(ctx context.Context, userDTO *TabUser) error {
	// update tab_user set name = ?, age = ?, email = ? where user_id = 666

	if userDTO.UserId == 0 {
		return errors.New("userId不能为空")
	}

	var (
		builder strings.Builder
		args    []interface{}
	)

	builder.WriteString(fmt.Sprintf("UPDATE %s SET ", m.table))

	updates := make([]string, 0)

	if userDTO.Name != "" {
		updates = append(updates, "name = ?")
		args = append(args, userDTO.Name)
	}
	if userDTO.Age != 0 {
		updates = append(updates, "age = ?")
		args = append(args, userDTO.Age)
	}
	if userDTO.Email.Valid && userDTO.Email.String != "" {
		updates = append(updates, "email = ?")
		args = append(args, userDTO.Email.String)
	}

	if len(updates) == 0 {
		return errors.New("没有可更新的字段")
	}

	// 每一个修改项后面添加一个,
	builder.WriteString(strings.Join(updates, ", "))

	// 拼接id条件
	builder.WriteString(" WHERE `user_id` = ?")
	args = append(args, userDTO.UserId)

	query := builder.String()
	_, err := m.conn.ExecCtx(ctx, query, args...)
	return err
}

func (m *defaultTabUserModel) tableName() string {
	return m.table
}

func (m *defaultTabUserModel) PageList(ctx context.Context, req PageRequest) ([]*TabUser, int64, error) {
	if req.Page <= 0 {
		req.Page = 1
	}
	if req.PageSize <= 0 {
		req.PageSize = 10
	}

	offset := (req.Page - 1) * req.PageSize

	// 查询总数
	countQuery := fmt.Sprintf("SELECT COUNT(1) FROM %s", m.table)
	var total int64
	err := m.conn.QueryRowCtx(ctx, &total, countQuery)
	if err != nil {
		return nil, 0, err
	}

	// 查询分页数据
	dataQuery := fmt.Sprintf("SELECT %s FROM %s LIMIT ? OFFSET ?", tabUserRows, m.table)
	var users []*TabUser
	err = m.conn.QueryRowsCtx(ctx, &users, dataQuery, req.PageSize, offset)
	if err != nil {
		return nil, 0, err
	}

	return users, total, nil
}
