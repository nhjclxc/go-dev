package main

func main() {
	/*
	   	消息产生者将消息放入队列消费者可以有多个,消费者1,消费者2,同时监听同一个队列,消息被消费?C1 C2共同争抢当前的消息队列内容,谁先拿到谁负责消费消息(隐患,高并发情况下,默认会产生某一个消息被多个消费者共同使用,可以设置一个开关(syncronize,与同步锁的性能不一样) 保证一条消息只能被一个消费者使用)
	      应用场景:红包;大项目中的资源调度(任务分配系统不需知道哪一个任务执行系统在空闲,直接将任务扔到消息队列中,空闲的系统自动争抢)
	*/

	// Work模式（工作模式，一个消息只能被一个消费者获取）

	// Work模式和Simple模式相比代码并没有发生变化只是多了一个消费者

	// 先启动两个消费者，接着启动生产者
}
