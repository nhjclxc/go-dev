package main

func main2() {
	/*
					   	Go 语言切片（Slice）详解
					      在 Go 语言中，切片（Slice）是比数组更强大的数据结构，它提供了更灵活的存储方式，可动态扩容，同时引用相同的底层数组。

					切片的基本语法：
						var slice []元素类型

					使用 make 创建切片
						slice := make([]int, 5) // 创建一个长度为5的int切片，初始值全为0
						fmt.Println(slice) // [0 0 0 0 0]


				（2）切片扩容策略
				切片扩容时：

				如果容量小于 1024，通常按 2 倍扩容。
				如果超过 1024，会按 1.25 倍扩容。
				但具体扩容策略由 runtime 决定。

			3. 切片的注意事项
			3.1 切片和数组的区别
			特性				数组（Array）			切片（Slice）
			长度是否固定		是						否（可扩容）
			是否是值类型		是（赋值时拷贝整个数组）	否（引用底层数组）
			是否可比较		是（相同类型和长度可比较）	否（不能比较，只能和 nil 比较）
			适用场景			固定长度数据				动态数据


		总结

		✅ 基本用法
			切片是动态数组，定义：var s []T
			make([]T, len, cap) 创建切片
			通过 append 扩展
			通过 copy 复制

		✅ 高级用法
			append 可能导致底层数组变化
			copy 用于深拷贝
			通过 append(slice[:i], slice[i+1:]...) 删除元素

		✅ 注意事项
			切片共享底层数组，避免误修改
			nil 切片和空切片的区别
			append 可能导致新数组分配
	*/
}
